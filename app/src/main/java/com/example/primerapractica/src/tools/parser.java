
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.primerapractica.src.tools;

import java_cup.runtime.*;
import java.util.*;
import com.example.primerapractica.src.basic.Analizador;
import com.example.primerapractica.src.tools.AnalizadorLexicoTexto;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\004\000\002" +
    "\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\032\005\006\007\007\010\005\011\004\012" +
    "\017\013\016\014\015\015\014\016\013\017\012\020\010" +
    "\021\020\001\002\000\004\004\040\001\002\000\004\004" +
    "\037\001\002\000\004\006\035\001\002\000\004\004\034" +
    "\001\002\000\004\004\032\001\002\000\004\002\031\001" +
    "\002\000\004\004\027\001\002\000\004\004\025\001\002" +
    "\000\004\004\024\001\002\000\004\004\023\001\002\000" +
    "\004\004\022\001\002\000\004\004\021\001\002\000\004" +
    "\002\ufff5\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\ufffc\001\002\000\004\002\ufffb" +
    "\001\002\000\004\016\026\001\002\000\004\002\ufffa\001" +
    "\002\000\004\017\030\001\002\000\004\002\ufff9\001\002" +
    "\000\004\002\001\001\002\000\004\020\033\001\002\000" +
    "\004\002\ufff8\001\002\000\004\002\ufff6\001\002\000\004" +
    "\004\036\001\002\000\004\002\ufff7\001\002\000\004\002" +
    "\000\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\002\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Connect this parser to a scanner!

    private Analizador analizador = new Analizador();



    public Analizador getAnalizador() {
        return analizador;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Linea EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Linea ::= HEADER1 TEXTO 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 analizador.agregar("# " + txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Linea ::= HEADER2 TEXTO 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 analizador.agregar("## " + txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linea ::= HEADER3 TEXTO 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 analizador.agregar("### " + txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Linea ::= HEADER4 TEXTO 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 analizador.agregar("#### " + txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Linea ::= HEADER5 TEXTO 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 analizador.agregar("##### " + txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Linea ::= HEADER6 TEXTO 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 analizador.agregar("###### " + txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Linea ::= NEGRITA TEXTO NEGRITA 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 analizador.agregar("**" + txt + "**"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Linea ::= ITALICA TEXTO ITALICA 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 analizador.agregar("*" + txt + "*");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Linea ::= NEGRITAITALICA TEXTO NEGRITAITALICA 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 analizador.agregar("***" + txt + "***");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Linea ::= ENTERO PUNTO TEXTO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 analizador.agregar(e1 + ". " + txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Linea ::= LISTA TEXTO 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 analizador.agregar("+ " + txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Linea ::= PARRAFO 
            {
              Object RESULT =null;
		int parrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String parr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 analizador.agregar(parr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
